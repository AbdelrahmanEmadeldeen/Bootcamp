
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000061e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000061e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cc  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063c  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000674  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ac  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 02 	call	0x466	; 0x466 <main>
  8a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
		else if ((PinNum>=24)&&(PinNum<32)){
			PinNum-=24;
			PinValue=Get_Bit(PIND,PinNum);
			return PinValue;
			                               }
}	
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	90 f5       	brcc	.+100    	; 0x10a <DIO_WritePin+0x78>
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	a9 f4       	brne	.+42     	; 0xd6 <DIO_WritePin+0x44>
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	62 2f       	mov	r22, r18
  ba:	29 81       	ldd	r18, Y+1	; 0x01
  bc:	42 2f       	mov	r20, r18
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WritePin+0x38>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	4a 95       	dec	r20
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WritePin+0x34>
  ce:	26 2b       	or	r18, r22
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	cd c0       	rjmp	.+410    	; 0x270 <DIO_WritePin+0x1de>
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	88 23       	and	r24, r24
  da:	09 f0       	breq	.+2      	; 0xde <DIO_WritePin+0x4c>
  dc:	c9 c0       	rjmp	.+402    	; 0x270 <DIO_WritePin+0x1de>
  de:	8b e3       	ldi	r24, 0x3B	; 59
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2b e3       	ldi	r18, 0x3B	; 59
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	62 2f       	mov	r22, r18
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	42 2f       	mov	r20, r18
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_WritePin+0x6a>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	4a 95       	dec	r20
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_WritePin+0x66>
 100:	20 95       	com	r18
 102:	26 23       	and	r18, r22
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
 108:	b3 c0       	rjmp	.+358    	; 0x270 <DIO_WritePin+0x1de>
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	c0 f1       	brcs	.+112    	; 0x180 <DIO_WritePin+0xee>
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	a8 f5       	brcc	.+106    	; 0x180 <DIO_WritePin+0xee>
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 50       	subi	r24, 0x08	; 8
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	a9 f4       	brne	.+42     	; 0x14c <DIO_WritePin+0xba>
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	28 e3       	ldi	r18, 0x38	; 56
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	62 2f       	mov	r22, r18
 130:	29 81       	ldd	r18, Y+1	; 0x01
 132:	42 2f       	mov	r20, r18
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_WritePin+0xae>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	4a 95       	dec	r20
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_WritePin+0xaa>
 144:	26 2b       	or	r18, r22
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	8f c0       	rjmp	.+286    	; 0x26a <DIO_WritePin+0x1d8>
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	88 23       	and	r24, r24
 150:	09 f0       	breq	.+2      	; 0x154 <DIO_WritePin+0xc2>
 152:	8b c0       	rjmp	.+278    	; 0x26a <DIO_WritePin+0x1d8>
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	28 e3       	ldi	r18, 0x38	; 56
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	62 2f       	mov	r22, r18
 162:	29 81       	ldd	r18, Y+1	; 0x01
 164:	42 2f       	mov	r20, r18
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xe0>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	4a 95       	dec	r20
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xdc>
 176:	20 95       	com	r18
 178:	26 23       	and	r18, r22
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	75 c0       	rjmp	.+234    	; 0x26a <DIO_WritePin+0x1d8>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	80 31       	cpi	r24, 0x10	; 16
 184:	c0 f1       	brcs	.+112    	; 0x1f6 <DIO_WritePin+0x164>
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	88 31       	cpi	r24, 0x18	; 24
 18a:	a8 f5       	brcc	.+106    	; 0x1f6 <DIO_WritePin+0x164>
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	80 51       	subi	r24, 0x10	; 16
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	a9 f4       	brne	.+42     	; 0x1c2 <DIO_WritePin+0x130>
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	25 e3       	ldi	r18, 0x35	; 53
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	62 2f       	mov	r22, r18
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	42 2f       	mov	r20, r18
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePin+0x124>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	4a 95       	dec	r20
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePin+0x120>
 1ba:	26 2b       	or	r18, r22
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	56 c0       	rjmp	.+172    	; 0x26e <DIO_WritePin+0x1dc>
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	88 23       	and	r24, r24
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_WritePin+0x138>
 1c8:	52 c0       	rjmp	.+164    	; 0x26e <DIO_WritePin+0x1dc>
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	25 e3       	ldi	r18, 0x35	; 53
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	62 2f       	mov	r22, r18
 1d8:	29 81       	ldd	r18, Y+1	; 0x01
 1da:	42 2f       	mov	r20, r18
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_WritePin+0x156>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	4a 95       	dec	r20
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_WritePin+0x152>
 1ec:	20 95       	com	r18
 1ee:	26 23       	and	r18, r22
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	3c c0       	rjmp	.+120    	; 0x26e <DIO_WritePin+0x1dc>
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	88 31       	cpi	r24, 0x18	; 24
 1fa:	d0 f1       	brcs	.+116    	; 0x270 <DIO_WritePin+0x1de>
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	80 32       	cpi	r24, 0x20	; 32
 200:	b8 f5       	brcc	.+110    	; 0x270 <DIO_WritePin+0x1de>
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 51       	subi	r24, 0x18	; 24
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	a9 f4       	brne	.+42     	; 0x238 <DIO_WritePin+0x1a6>
 20e:	82 e3       	ldi	r24, 0x32	; 50
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	22 e3       	ldi	r18, 0x32	; 50
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	62 2f       	mov	r22, r18
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	42 2f       	mov	r20, r18
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WritePin+0x19a>
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	4a 95       	dec	r20
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WritePin+0x196>
 230:	26 2b       	or	r18, r22
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	1c c0       	rjmp	.+56     	; 0x270 <DIO_WritePin+0x1de>
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	88 23       	and	r24, r24
 23c:	c9 f4       	brne	.+50     	; 0x270 <DIO_WritePin+0x1de>
 23e:	82 e3       	ldi	r24, 0x32	; 50
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	22 e3       	ldi	r18, 0x32	; 50
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	f9 01       	movw	r30, r18
 248:	20 81       	ld	r18, Z
 24a:	62 2f       	mov	r22, r18
 24c:	29 81       	ldd	r18, Y+1	; 0x01
 24e:	42 2f       	mov	r20, r18
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePin+0x1ca>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	4a 95       	dec	r20
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePin+0x1c6>
 260:	20 95       	com	r18
 262:	26 23       	and	r18, r22
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
 268:	03 c0       	rjmp	.+6      	; 0x270 <DIO_WritePin+0x1de>
 26a:	00 00       	nop
 26c:	01 c0       	rjmp	.+2      	; 0x270 <DIO_WritePin+0x1de>
 26e:	00 00       	nop
 270:	00 00       	nop
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <DIO_SetPinDirection>:




void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_SetPinDirection+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	6a 83       	std	Y+2, r22	; 0x02
	if ((PinNum>=0)&&(PinNum<8))  {
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	88 30       	cpi	r24, 0x08	; 8
 28e:	90 f5       	brcc	.+100    	; 0x2f4 <DIO_SetPinDirection+0x78>
		
		if(PinDirection==1){
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	a9 f4       	brne	.+42     	; 0x2c0 <DIO_SetPinDirection+0x44>
			Set_Bit(DDRA,PinNum);
 296:	8a e3       	ldi	r24, 0x3A	; 58
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2a e3       	ldi	r18, 0x3A	; 58
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	62 2f       	mov	r22, r18
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	42 2f       	mov	r20, r18
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x38>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x34>
 2b8:	26 2b       	or	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRD,PinNum);
		                        }
	                                   }
 2be:	cd c0       	rjmp	.+410    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	if ((PinNum>=0)&&(PinNum<8))  {
		
		if(PinDirection==1){
			Set_Bit(DDRA,PinNum);
		                   }
		else if(PinDirection==0){
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	88 23       	and	r24, r24
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <DIO_SetPinDirection+0x4c>
 2c6:	c9 c0       	rjmp	.+402    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			Clear_Bit(DDRA,PinNum);
 2c8:	8a e3       	ldi	r24, 0x3A	; 58
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2a e3       	ldi	r18, 0x3A	; 58
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	f9 01       	movw	r30, r18
 2d2:	20 81       	ld	r18, Z
 2d4:	62 2f       	mov	r22, r18
 2d6:	29 81       	ldd	r18, Y+1	; 0x01
 2d8:	42 2f       	mov	r20, r18
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SetPinDirection+0x6a>
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	4a 95       	dec	r20
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SetPinDirection+0x66>
 2ea:	20 95       	com	r18
 2ec:	26 23       	and	r18, r22
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRD,PinNum);
		                        }
	                                   }
 2f2:	b3 c0       	rjmp	.+358    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRA,PinNum);
		                        }
	                               }
	else if ((PinNum>=8)&&(PinNum<16)){
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	88 30       	cpi	r24, 0x08	; 8
 2f8:	c0 f1       	brcs	.+112    	; 0x36a <DIO_SetPinDirection+0xee>
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	80 31       	cpi	r24, 0x10	; 16
 2fe:	a8 f5       	brcc	.+106    	; 0x36a <DIO_SetPinDirection+0xee>
		PinNum-=8;
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 50       	subi	r24, 0x08	; 8
 304:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection==1){
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	a9 f4       	brne	.+42     	; 0x336 <DIO_SetPinDirection+0xba>
			Set_Bit(DDRB,PinNum);
 30c:	87 e3       	ldi	r24, 0x37	; 55
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	27 e3       	ldi	r18, 0x37	; 55
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	62 2f       	mov	r22, r18
 31a:	29 81       	ldd	r18, Y+1	; 0x01
 31c:	42 2f       	mov	r20, r18
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPinDirection+0xae>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	4a 95       	dec	r20
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPinDirection+0xaa>
 32e:	26 2b       	or	r18, r22
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
			Clear_Bit(DDRA,PinNum);
		                        }
	                               }
	else if ((PinNum>=8)&&(PinNum<16)){
		PinNum-=8;
		if(PinDirection==1){
 334:	8f c0       	rjmp	.+286    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			Set_Bit(DDRB,PinNum);
		                   }
		else if(PinDirection==0){
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	88 23       	and	r24, r24
 33a:	09 f0       	breq	.+2      	; 0x33e <DIO_SetPinDirection+0xc2>
 33c:	8b c0       	rjmp	.+278    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			Clear_Bit(DDRB,PinNum);
 33e:	87 e3       	ldi	r24, 0x37	; 55
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	27 e3       	ldi	r18, 0x37	; 55
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	62 2f       	mov	r22, r18
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	42 2f       	mov	r20, r18
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPinDirection+0xe0>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	4a 95       	dec	r20
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPinDirection+0xdc>
 360:	20 95       	com	r18
 362:	26 23       	and	r18, r22
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
			Clear_Bit(DDRA,PinNum);
		                        }
	                               }
	else if ((PinNum>=8)&&(PinNum<16)){
		PinNum-=8;
		if(PinDirection==1){
 368:	75 c0       	rjmp	.+234    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRB,PinNum);
		                        }
	                                  }
	else if ((PinNum>=16)&&(PinNum<24)){
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	80 31       	cpi	r24, 0x10	; 16
 36e:	c0 f1       	brcs	.+112    	; 0x3e0 <DIO_SetPinDirection+0x164>
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	88 31       	cpi	r24, 0x18	; 24
 374:	a8 f5       	brcc	.+106    	; 0x3e0 <DIO_SetPinDirection+0x164>
		PinNum-=16;
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	80 51       	subi	r24, 0x10	; 16
 37a:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection==1){
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	a9 f4       	brne	.+42     	; 0x3ac <DIO_SetPinDirection+0x130>
			Set_Bit(DDRC,PinNum);
 382:	84 e3       	ldi	r24, 0x34	; 52
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	24 e3       	ldi	r18, 0x34	; 52
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	f9 01       	movw	r30, r18
 38c:	20 81       	ld	r18, Z
 38e:	62 2f       	mov	r22, r18
 390:	29 81       	ldd	r18, Y+1	; 0x01
 392:	42 2f       	mov	r20, r18
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPinDirection+0x124>
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	4a 95       	dec	r20
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPinDirection+0x120>
 3a4:	26 2b       	or	r18, r22
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
			Clear_Bit(DDRB,PinNum);
		                        }
	                                  }
	else if ((PinNum>=16)&&(PinNum<24)){
		PinNum-=16;
		if(PinDirection==1){
 3aa:	56 c0       	rjmp	.+172    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			Set_Bit(DDRC,PinNum);
		                   }
		else if(PinDirection==0){
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	88 23       	and	r24, r24
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_SetPinDirection+0x138>
 3b2:	52 c0       	rjmp	.+164    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			Clear_Bit(DDRC,PinNum);
 3b4:	84 e3       	ldi	r24, 0x34	; 52
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	24 e3       	ldi	r18, 0x34	; 52
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	f9 01       	movw	r30, r18
 3be:	20 81       	ld	r18, Z
 3c0:	62 2f       	mov	r22, r18
 3c2:	29 81       	ldd	r18, Y+1	; 0x01
 3c4:	42 2f       	mov	r20, r18
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_SetPinDirection+0x156>
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	4a 95       	dec	r20
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_SetPinDirection+0x152>
 3d6:	20 95       	com	r18
 3d8:	26 23       	and	r18, r22
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
			Clear_Bit(DDRB,PinNum);
		                        }
	                                  }
	else if ((PinNum>=16)&&(PinNum<24)){
		PinNum-=16;
		if(PinDirection==1){
 3de:	3c c0       	rjmp	.+120    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRC,PinNum);
		                        }
	                                  }
	else if ((PinNum>=24)&&(PinNum<32)){
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 31       	cpi	r24, 0x18	; 24
 3e4:	d0 f1       	brcs	.+116    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	80 32       	cpi	r24, 0x20	; 32
 3ea:	b8 f5       	brcc	.+110    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		PinNum-=24;
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	88 51       	subi	r24, 0x18	; 24
 3f0:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection==1){
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	a9 f4       	brne	.+42     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			Set_Bit(DDRD,PinNum);
 3f8:	81 e3       	ldi	r24, 0x31	; 49
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	21 e3       	ldi	r18, 0x31	; 49
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	f9 01       	movw	r30, r18
 402:	20 81       	ld	r18, Z
 404:	62 2f       	mov	r22, r18
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	42 2f       	mov	r20, r18
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	4a 95       	dec	r20
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	26 2b       	or	r18, r22
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRD,PinNum);
		                        }
	                                   }
 420:	1c c0       	rjmp	.+56     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	else if ((PinNum>=24)&&(PinNum<32)){
		PinNum-=24;
		if(PinDirection==1){
			Set_Bit(DDRD,PinNum);
		                   }
		else if(PinDirection==0){
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	88 23       	and	r24, r24
 426:	c9 f4       	brne	.+50     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			Clear_Bit(DDRD,PinNum);
 428:	81 e3       	ldi	r24, 0x31	; 49
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	21 e3       	ldi	r18, 0x31	; 49
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	62 2f       	mov	r22, r18
 436:	29 81       	ldd	r18, Y+1	; 0x01
 438:	42 2f       	mov	r20, r18
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	4a 95       	dec	r20
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	20 95       	com	r18
 44c:	26 23       	and	r18, r22
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
		                        }
	                                   }
 452:	03 c0       	rjmp	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			Clear_Bit(DDRA,PinNum);
		                        }
	                               }
	else if ((PinNum>=8)&&(PinNum<16)){
		PinNum-=8;
		if(PinDirection==1){
 454:	00 00       	nop
 456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			Clear_Bit(DDRB,PinNum);
		                        }
	                                  }
	else if ((PinNum>=16)&&(PinNum<24)){
		PinNum-=16;
		if(PinDirection==1){
 458:	00 00       	nop
		                   }
		else if(PinDirection==0){
			Clear_Bit(DDRD,PinNum);
		                        }
	                                   }
 45a:	00 00       	nop
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <main>:
#include "Timer\Timer.h"



 int main(void)
 {   DIO_SetPinDirection(PINB4,HIGH);
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	8c e0       	ldi	r24, 0x0C	; 12
 472:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
	 	 DIO_WritePin(PINB4,HIGH);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>

	 while(1){
	 DIO_WritePin(PINB4,HIGH);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	8c e0       	ldi	r24, 0x0C	; 12
 482:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	 timer_mdelay_interrupt(TIME_1000MS);
 486:	68 ee       	ldi	r22, 0xE8	; 232
 488:	73 e0       	ldi	r23, 0x03	; 3
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <timer_mdelay_interrupt>
	 DIO_WritePin(PINB4,LOW);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	 timer_mdelay_interrupt(TIME_1000MS);
 49a:	68 ee       	ldi	r22, 0xE8	; 232
 49c:	73 e0       	ldi	r23, 0x03	; 3
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <timer_mdelay_interrupt>
	 }
 4a6:	eb cf       	rjmp	.-42     	; 0x47e <main+0x18>

000004a8 <timer_mdelay_interrupt>:
	
	
	
	
	
}
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	28 97       	sbiw	r28, 0x08	; 8
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	6d 83       	std	Y+5, r22	; 0x05
 4be:	7e 83       	std	Y+6, r23	; 0x06
 4c0:	8f 83       	std	Y+7, r24	; 0x07
 4c2:	98 87       	std	Y+8, r25	; 0x08
 4c4:	19 82       	std	Y+1, r1	; 0x01
 4c6:	1a 82       	std	Y+2, r1	; 0x02
 4c8:	1b 82       	std	Y+3, r1	; 0x03
 4ca:	1c 82       	std	Y+4, r1	; 0x04
 4cc:	83 e5       	ldi	r24, 0x53	; 83
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	fc 01       	movw	r30, r24
 4d2:	10 82       	st	Z, r1
 4d4:	8c e5       	ldi	r24, 0x5C	; 92
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	2a ef       	ldi	r18, 0xFA	; 250
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
 4de:	8d 81       	ldd	r24, Y+5	; 0x05
 4e0:	9e 81       	ldd	r25, Y+6	; 0x06
 4e2:	af 81       	ldd	r26, Y+7	; 0x07
 4e4:	b8 85       	ldd	r27, Y+8	; 0x08
 4e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
 4ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 4ee:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_end+0x2>
 4f2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_end+0x3>
 4f6:	89 e5       	ldi	r24, 0x59	; 89
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	29 e5       	ldi	r18, 0x59	; 89
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	22 60       	ori	r18, 0x02	; 2
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
 508:	78 94       	sei
 50a:	82 e5       	ldi	r24, 0x52	; 82
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	10 82       	st	Z, r1
 512:	83 e5       	ldi	r24, 0x53	; 83
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	2b e8       	ldi	r18, 0x8B	; 139
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
 51c:	00 00       	nop
 51e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 522:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 526:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_end+0x2>
 52a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_end+0x3>
 52e:	89 2b       	or	r24, r25
 530:	8a 2b       	or	r24, r26
 532:	8b 2b       	or	r24, r27
 534:	a1 f7       	brne	.-24     	; 0x51e <timer_mdelay_interrupt+0x76>
 536:	00 00       	nop
 538:	28 96       	adiw	r28, 0x08	; 8
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <__vector_10>:
ISR(TIMER0_COMP_vect){
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
	
	counter--;
 566:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 56a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 56e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_end+0x2>
 572:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_end+0x3>
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	a1 09       	sbc	r26, r1
 57a:	b1 09       	sbc	r27, r1
 57c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
 580:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 584:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_end+0x2>
 588:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_end+0x3>

	
	
 58c:	00 00       	nop
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	0f 90       	pop	r0
 59c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
