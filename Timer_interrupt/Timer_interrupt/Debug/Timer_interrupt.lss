
Timer_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b1  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ad  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000531  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  74:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
		else if ((PinNum>=24)&&(PinNum<32)){
			PinNum-=24;
			PinValue=Get_Bit(PIND,PinNum);
			return PinValue;
			                               }
}	
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	f8 f4       	brcc	.+62     	; 0xbe <DIO_WritePin+0x42>
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	69 f4       	brne	.+26     	; 0x9e <DIO_WritePin+0x22>
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	a9 01       	movw	r20, r18
  8a:	02 c0       	rjmp	.+4      	; 0x90 <DIO_WritePin+0x14>
  8c:	44 0f       	add	r20, r20
  8e:	55 1f       	adc	r21, r21
  90:	8a 95       	dec	r24
  92:	e2 f7       	brpl	.-8      	; 0x8c <DIO_WritePin+0x10>
  94:	ca 01       	movw	r24, r20
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	89 2b       	or	r24, r25
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	08 95       	ret
  9e:	61 11       	cpse	r22, r1
  a0:	75 c0       	rjmp	.+234    	; 0x18c <DIO_WritePin+0x110>
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	a9 01       	movw	r20, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_WritePin+0x32>
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_WritePin+0x2e>
  b2:	ca 01       	movw	r24, r20
  b4:	80 95       	com	r24
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	89 23       	and	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
  be:	98 ef       	ldi	r25, 0xF8	; 248
  c0:	98 0f       	add	r25, r24
  c2:	98 30       	cpi	r25, 0x08	; 8
  c4:	f8 f4       	brcc	.+62     	; 0x104 <DIO_WritePin+0x88>
  c6:	61 30       	cpi	r22, 0x01	; 1
  c8:	69 f4       	brne	.+26     	; 0xe4 <DIO_WritePin+0x68>
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	a9 01       	movw	r20, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_WritePin+0x5a>
  d2:	44 0f       	add	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	9a 95       	dec	r25
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_WritePin+0x56>
  da:	ca 01       	movw	r24, r20
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	89 2b       	or	r24, r25
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	08 95       	ret
  e4:	61 11       	cpse	r22, r1
  e6:	52 c0       	rjmp	.+164    	; 0x18c <DIO_WritePin+0x110>
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	a9 01       	movw	r20, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_WritePin+0x78>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	9a 95       	dec	r25
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_WritePin+0x74>
  f8:	ca 01       	movw	r24, r20
  fa:	80 95       	com	r24
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	89 23       	and	r24, r25
 100:	88 bb       	out	0x18, r24	; 24
 102:	08 95       	ret
 104:	90 ef       	ldi	r25, 0xF0	; 240
 106:	98 0f       	add	r25, r24
 108:	98 30       	cpi	r25, 0x08	; 8
 10a:	f8 f4       	brcc	.+62     	; 0x14a <DIO_WritePin+0xce>
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	69 f4       	brne	.+26     	; 0x12a <DIO_WritePin+0xae>
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	a9 01       	movw	r20, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_WritePin+0xa0>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	9a 95       	dec	r25
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_WritePin+0x9c>
 120:	ca 01       	movw	r24, r20
 122:	95 b3       	in	r25, 0x15	; 21
 124:	89 2b       	or	r24, r25
 126:	85 bb       	out	0x15, r24	; 21
 128:	08 95       	ret
 12a:	61 11       	cpse	r22, r1
 12c:	2f c0       	rjmp	.+94     	; 0x18c <DIO_WritePin+0x110>
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	a9 01       	movw	r20, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_WritePin+0xbe>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	9a 95       	dec	r25
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_WritePin+0xba>
 13e:	ca 01       	movw	r24, r20
 140:	80 95       	com	r24
 142:	95 b3       	in	r25, 0x15	; 21
 144:	89 23       	and	r24, r25
 146:	85 bb       	out	0x15, r24	; 21
 148:	08 95       	ret
 14a:	88 51       	subi	r24, 0x18	; 24
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	f0 f4       	brcc	.+60     	; 0x18c <DIO_WritePin+0x110>
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_WritePin+0xf2>
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	a9 01       	movw	r20, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_WritePin+0xe4>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	8a 95       	dec	r24
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_WritePin+0xe0>
 164:	ca 01       	movw	r24, r20
 166:	92 b3       	in	r25, 0x12	; 18
 168:	89 2b       	or	r24, r25
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	08 95       	ret
 16e:	61 11       	cpse	r22, r1
 170:	0d c0       	rjmp	.+26     	; 0x18c <DIO_WritePin+0x110>
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	a9 01       	movw	r20, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_WritePin+0x102>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_WritePin+0xfe>
 182:	ca 01       	movw	r24, r20
 184:	80 95       	com	r24
 186:	92 b3       	in	r25, 0x12	; 18
 188:	89 23       	and	r24, r25
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	08 95       	ret

0000018e <DIO_SetPinDirection>:



void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if ((PinNum>=0)&&(PinNum<8))  {
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	f8 f4       	brcc	.+62     	; 0x1d0 <DIO_SetPinDirection+0x42>
		
		if(PinDirection==1){
 192:	61 30       	cpi	r22, 0x01	; 1
 194:	69 f4       	brne	.+26     	; 0x1b0 <DIO_SetPinDirection+0x22>
			Set_Bit(DDRA,PinNum);
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	a9 01       	movw	r20, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinDirection+0x14>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinDirection+0x10>
 1a6:	ca 01       	movw	r24, r20
 1a8:	9a b3       	in	r25, 0x1a	; 26
 1aa:	89 2b       	or	r24, r25
 1ac:	8a bb       	out	0x1a, r24	; 26
 1ae:	08 95       	ret
		                   }
		else if(PinDirection==0){
 1b0:	61 11       	cpse	r22, r1
 1b2:	75 c0       	rjmp	.+234    	; 0x29e <DIO_SetPinDirection+0x110>
			Clear_Bit(DDRA,PinNum);
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	a9 01       	movw	r20, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_SetPinDirection+0x32>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_SetPinDirection+0x2e>
 1c4:	ca 01       	movw	r24, r20
 1c6:	80 95       	com	r24
 1c8:	9a b3       	in	r25, 0x1a	; 26
 1ca:	89 23       	and	r24, r25
 1cc:	8a bb       	out	0x1a, r24	; 26
 1ce:	08 95       	ret
		                        }
	                               }
	else if ((PinNum>=8)&&(PinNum<16)){
 1d0:	98 ef       	ldi	r25, 0xF8	; 248
 1d2:	98 0f       	add	r25, r24
 1d4:	98 30       	cpi	r25, 0x08	; 8
 1d6:	f8 f4       	brcc	.+62     	; 0x216 <DIO_SetPinDirection+0x88>
		PinNum-=8;
		if(PinDirection==1){
 1d8:	61 30       	cpi	r22, 0x01	; 1
 1da:	69 f4       	brne	.+26     	; 0x1f6 <DIO_SetPinDirection+0x68>
			Set_Bit(DDRB,PinNum);
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	a9 01       	movw	r20, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0x5a>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	9a 95       	dec	r25
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0x56>
 1ec:	ca 01       	movw	r24, r20
 1ee:	97 b3       	in	r25, 0x17	; 23
 1f0:	89 2b       	or	r24, r25
 1f2:	87 bb       	out	0x17, r24	; 23
 1f4:	08 95       	ret
		                   }
		else if(PinDirection==0){
 1f6:	61 11       	cpse	r22, r1
 1f8:	52 c0       	rjmp	.+164    	; 0x29e <DIO_SetPinDirection+0x110>
			Clear_Bit(DDRB,PinNum);
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	a9 01       	movw	r20, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinDirection+0x78>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	9a 95       	dec	r25
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinDirection+0x74>
 20a:	ca 01       	movw	r24, r20
 20c:	80 95       	com	r24
 20e:	97 b3       	in	r25, 0x17	; 23
 210:	89 23       	and	r24, r25
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
		                        }
	                                  }
	else if ((PinNum>=16)&&(PinNum<24)){
 216:	90 ef       	ldi	r25, 0xF0	; 240
 218:	98 0f       	add	r25, r24
 21a:	98 30       	cpi	r25, 0x08	; 8
 21c:	f8 f4       	brcc	.+62     	; 0x25c <DIO_SetPinDirection+0xce>
		PinNum-=16;
		if(PinDirection==1){
 21e:	61 30       	cpi	r22, 0x01	; 1
 220:	69 f4       	brne	.+26     	; 0x23c <DIO_SetPinDirection+0xae>
			Set_Bit(DDRC,PinNum);
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	a9 01       	movw	r20, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinDirection+0xa0>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	9a 95       	dec	r25
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinDirection+0x9c>
 232:	ca 01       	movw	r24, r20
 234:	94 b3       	in	r25, 0x14	; 20
 236:	89 2b       	or	r24, r25
 238:	84 bb       	out	0x14, r24	; 20
 23a:	08 95       	ret
		                   }
		else if(PinDirection==0){
 23c:	61 11       	cpse	r22, r1
 23e:	2f c0       	rjmp	.+94     	; 0x29e <DIO_SetPinDirection+0x110>
			Clear_Bit(DDRC,PinNum);
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	a9 01       	movw	r20, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPinDirection+0xbe>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	9a 95       	dec	r25
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPinDirection+0xba>
 250:	ca 01       	movw	r24, r20
 252:	80 95       	com	r24
 254:	94 b3       	in	r25, 0x14	; 20
 256:	89 23       	and	r24, r25
 258:	84 bb       	out	0x14, r24	; 20
 25a:	08 95       	ret
		                        }
	                                  }
	else if ((PinNum>=24)&&(PinNum<32)){
 25c:	88 51       	subi	r24, 0x18	; 24
 25e:	88 30       	cpi	r24, 0x08	; 8
 260:	f0 f4       	brcc	.+60     	; 0x29e <DIO_SetPinDirection+0x110>
		PinNum-=24;
		if(PinDirection==1){
 262:	61 30       	cpi	r22, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_SetPinDirection+0xf2>
			Set_Bit(DDRD,PinNum);
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	a9 01       	movw	r20, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SetPinDirection+0xe4>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SetPinDirection+0xe0>
 276:	ca 01       	movw	r24, r20
 278:	91 b3       	in	r25, 0x11	; 17
 27a:	89 2b       	or	r24, r25
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	08 95       	ret
		                   }
		else if(PinDirection==0){
 280:	61 11       	cpse	r22, r1
 282:	0d c0       	rjmp	.+26     	; 0x29e <DIO_SetPinDirection+0x110>
			Clear_Bit(DDRD,PinNum);
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	a9 01       	movw	r20, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0x102>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0xfe>
 294:	ca 01       	movw	r24, r20
 296:	80 95       	com	r24
 298:	91 b3       	in	r25, 0x11	; 17
 29a:	89 23       	and	r24, r25
 29c:	81 bb       	out	0x11, r24	; 17
 29e:	08 95       	ret

000002a0 <main>:
#include "Timer\Timer.h"



 int main(void)
 {   DIO_SetPinDirection(PINB4,HIGH);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_SetPinDirection>
	 	 DIO_WritePin(PINB4,HIGH);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>

	 while(1){
	 DIO_WritePin(PINB4,HIGH);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	 timer_mdelay_interrupt(TIME_1000MS);
 2b8:	68 ee       	ldi	r22, 0xE8	; 232
 2ba:	73 e0       	ldi	r23, 0x03	; 3
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 6d 01 	call	0x2da	; 0x2da <timer_mdelay_interrupt>
	 DIO_WritePin(PINB4,LOW);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	 timer_mdelay_interrupt(TIME_1000MS);
 2cc:	68 ee       	ldi	r22, 0xE8	; 232
 2ce:	73 e0       	ldi	r23, 0x03	; 3
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 6d 01 	call	0x2da	; 0x2da <timer_mdelay_interrupt>
 2d8:	eb cf       	rjmp	.-42     	; 0x2b0 <main+0x10>

000002da <timer_mdelay_interrupt>:
}
	}
void timer_init(){
	
	OCR0=250;
	TCCR0=0b10001011;
 2da:	13 be       	out	0x33, r1	; 51
 2dc:	2a ef       	ldi	r18, 0xFA	; 250
 2de:	2c bf       	out	0x3c, r18	; 60
 2e0:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
 2e4:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <_edata+0x1>
 2e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_edata+0x2>
 2ec:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <_edata+0x3>
 2f0:	89 b7       	in	r24, 0x39	; 57
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	89 bf       	out	0x39, r24	; 57
 2f6:	78 94       	sei
 2f8:	12 be       	out	0x32, r1	; 50
 2fa:	8b e8       	ldi	r24, 0x8B	; 139
 2fc:	83 bf       	out	0x33, r24	; 51
 2fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 302:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 306:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 30a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	a1 05       	cpc	r26, r1
 312:	b1 05       	cpc	r27, r1
 314:	e1 f7       	brne	.-8      	; 0x30e <timer_mdelay_interrupt+0x34>
 316:	08 95       	ret

00000318 <__vector_10>:
	
	
	
	
}
ISR(TIMER0_COMP_vect){
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
	
	counter--;
 32a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 32e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 332:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 336:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	a1 09       	sbc	r26, r1
 33e:	b1 09       	sbc	r27, r1
 340:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 344:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 348:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 34c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>

	
	
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
